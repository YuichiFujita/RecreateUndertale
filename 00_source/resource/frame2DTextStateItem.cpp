//============================================================
//
//	アイテムテキスト状態処理 [frame2DTextStateItem.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "frame2DTextStateItem.h"
#include "frame2DModuleText.h"
#include "frame2DTextBuffer.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{

}

//************************************************************
//	子クラス [CFrame2DTextStateItem] のメンバ関数
//************************************************************
//============================================================
//	移譲コンストラクタ (デフォルト)
//============================================================
CFrame2DTextStateItem::CFrame2DTextStateItem() : CFrame2DTextStateItem(VEC3_ZERO)
{

}

//============================================================
//	コンストラクタ (配置プリセット)
//============================================================
CFrame2DTextStateItem::CFrame2DTextStateItem(const CFrame2D::EPreset preset) : CFrame2DTextStateText(preset)
{

}

//============================================================
//	コンストラクタ (配置指定)
//============================================================
CFrame2DTextStateItem::CFrame2DTextStateItem(const VECTOR3& rOffset) : CFrame2DTextStateText(rOffset)
{

}

//============================================================
//	デストラクタ
//============================================================
CFrame2DTextStateItem::~CFrame2DTextStateItem()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CFrame2DTextStateItem::Init()
{
	// 親クラスの初期化
	if (FAILED(CFrame2DTextStateText::Init()))
	{ // 初期化に失敗した場合

		assert(false);
		return E_FAIL;
	}

	// 相対位置の設定
	CFrame2DTextStateItem::SetPositionRelative();	// 自身の相対位置

	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CFrame2DTextStateItem::Uninit()
{
	// 親クラスの終了
	CFrame2DTextStateText::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CFrame2DTextStateItem::Update(const float fDeltaTime)
{
	// 親クラスの更新
	CFrame2DTextStateText::Update(fDeltaTime);
}
