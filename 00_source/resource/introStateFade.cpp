//============================================================
//
//	フェード状態処理 [introStateFade.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "introStateFade.h"
#include "introManager.h"
#include "manager.h"
#include "fade.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const int	PRIORITY	= 5;	// フェードの優先順位
	const float	FADE_LEVEL	= 1.8f;	// フェードのα変化量
}

//************************************************************
//	子クラス [CIntroStateFade] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CIntroStateFade::CIntroStateFade()
{

}

//============================================================
//	デストラクタ
//============================================================
CIntroStateFade::~CIntroStateFade()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CIntroStateFade::Init()
{
	// フェードを開始する
	CFade* pFade = GET_MANAGER->GetFade();	// フェード情報
	pFade->SetFade(FADE_LEVEL, FADE_LEVEL, PRIORITY);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CIntroStateFade::Uninit()
{
	// 自身の破棄
	delete this;
}

//============================================================
//	更新処理
//============================================================
void CIntroStateFade::Update(const float fDeltaTime)
{
	// フェードインしていない場合抜ける
	CFade* pFade = GET_MANAGER->GetFade();	// フェード情報
	if (pFade->GetState() != CFade::FADE_IN) { return; }

	// 物語と状態を遷移させる
	m_pContext->NextStory();
}
