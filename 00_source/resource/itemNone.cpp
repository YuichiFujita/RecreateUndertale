//============================================================
//
//	特殊効果なしアイテム処理 [itemNone.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "itemNone.h"
#include "sceneGame.h"
#include "player.h"
#include "playerItem.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{

}

//************************************************************
//	子クラス [CItemNone] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CItemNone::CItemNone()
{

}

//============================================================
//	デストラクタ
//============================================================
CItemNone::~CItemNone()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CItemNone::Init()
{
	// アイテム情報の初期化
	if (FAILED(CItemData::Init()))
	{ // 初期化に失敗した場合

		assert(false);
		return E_FAIL;
	}

	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CItemNone::Uninit()
{
	// アイテム情報の終了
	CItemData::Uninit();
}

//============================================================
//	アイテム使用処理
//============================================================
void CItemNone::Use(const int nBagIdx) const
{
	// 使用したアイテムの削除
	CPlayerItem* pItem = CSceneGame::GetPlayer()->GetItem();	// プレイヤー所持アイテム情報
	pItem->DeleteItem(nBagIdx);
}

//============================================================
//	アイテム詳細の文字列取得処理
//============================================================
std::string CItemNone::Detail() const
{
	// アイテム詳細の取得
	std::string sDetail = CItemData::Detail();

	// アイテム詳細を返す
	return sDetail;
}

//============================================================
//	種類ごとのセットアップ処理
//============================================================
HRESULT CItemNone::LoadSetup(std::ifstream* pFile, std::string& /*rString*/)
{
	// ファイルストリームが未設定の場合抜ける
	if (pFile == nullptr) { assert(false); return E_FAIL; }

	return S_OK;
}
