//============================================================
//
//	オブジェクトメッシュフィールドヘッダー [objectMeshField.h]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	二重インクルード防止
//************************************************************
#ifndef _OBJECT_MESHFIELD_H_
#define _OBJECT_MESHFIELD_H_

//************************************************************
//	インクルードファイル
//************************************************************
#include "object.h"
#include "renderState.h"

//************************************************************
//	クラス定義
//************************************************************
// オブジェクトメッシュフィールドクラス
class CObjectMeshField : public CObject
{
public:
	// コンストラクタ
	explicit CObjectMeshField(const CObject::ELabel label = LABEL_NONE, const CObject::EDim dimension = DIM_3D, const int nPriority = DEFAULT_PRIO);

	// デストラクタ
	~CObjectMeshField() override;

	// オーバーライド関数
	HRESULT Init() override;	// 初期化
	void Uninit() override;		// 終了
	void Update(const float fDeltaTime) override;		// 更新
	void Draw(CShader* pShader = nullptr) override;		// 描画
	void SetVec3Position(const VECTOR3& rPos) override;	// 位置設定
	void SetVec3Rotation(const VECTOR3& rRot) override;	// 向き設定
	void SetVec2Size(const VECTOR2& rSize) override;	// 大きさ設定
	inline VECTOR3 GetVec3Position() const override	{ return m_pos; }		// 位置取得
	inline VECTOR3 GetVec3Rotation() const override	{ return m_rot; }		// 向き取得
	inline VECTOR2 GetVec2Size() const override		{ return m_size; }		// 大きさ取得
	inline MATRIX* GetPtrMtxWorld() override		{ return &m_mtxWorld; }	// マトリックスポインタ取得
	inline MATRIX GetMtxWorld() const override		{ return m_mtxWorld; }	// マトリックス取得

	// 静的メンバ関数
	static CObjectMeshField* Create	// 生成
	( // 引数
		const VECTOR3& rPos,		// 位置
		const VECTOR3& rRot,		// 向き
		const VECTOR2& rSize,		// 大きさ
		const COLOR& rCol,			// 色
		const POSGRID2& rPart,		// 分割数
		const POSGRID2& rTexPart	// テクスチャ分割数
	);

	// メンバ関数
	CRenderState* GetRenderState();					// レンダーステート情報取得
	void BindTexture(const int nTextureIdx);		// テクスチャ割当 (インデックス)
	void BindTexture(const char* pTexturePath);		// テクスチャ割当 (パス)
	void SetAlpha(const float fAlpha);				// 透明度設定
	void SetColor(const COLOR& rCol);				// 色設定
	HRESULT SetPattern(const POSGRID2& rPart);		// 分割数設定
	void SetTexPattern(const POSGRID2& rTexPart);	// テクスチャ分割数設定
	inline int GetTextureIndex() const		{ return m_nTextureIdx; }	// テクスチャインデックス取得
	inline float GetAlpha() const			{ return m_col.a; }			// 透明度取得
	inline COLOR GetColor() const			{ return m_col; }			// 色取得
	inline POSGRID2 GetPattern() const		{ return m_part; }			// 分割数取得
	inline POSGRID2 GetTexPattern() const	{ return m_texPart; }		// テクスチャ分割数取得
	inline int GetNumVertex() const			{ return m_nNumVtx; }		// 頂点数取得

	void SetGapPosition(const int nIdx, const VECTOR3& rPos);			// 座標のずれ設定
	VECTOR3 GetGapPosition(const int nIdx);								// 座標のずれ取得
	void SetMeshVertexPosition(const int nIdx, const VECTOR3& rPos);	// メッシュの頂点位置設定
	VECTOR3 GetMeshVertexPosition(const int nIdx);						// メッシュの頂点位置取得
	bool LandPosition(VECTOR3& rPos, VECTOR3& rMove);					// メッシュ着地
	void SetTerrain(const POSGRID2& rPart, VECTOR3* pPosGap);			// 地形設定
	bool IsPositionRange(const VECTOR3& rPos);		// メッシュの範囲内取得
	float GetPositionHeight(const VECTOR3& rPos);	// メッシュの着地位置取得
	void NormalizeNormal();							// 法線の正規化

protected:
	// 仮想関数
	virtual void CalcDrawMatrix();	// 描画マトリックス計算

	// メンバ関数
	void SetVtx(bool bNor);	// 頂点情報の設定
	void SetIdx();			// インデックス情報の設定
	void SetScrollTex		// スクロールのテクスチャ座標の設定
	( // 引数
		const float fTexU,	// テクスチャの横座標の開始位置
		const float fTexV	// テクスチャの縦座標の開始位置
	);

private:
	// オーバーライド関数
	inline void Release() override { CObject::Release(); }	// 破棄

	// メンバ関数
	void DrawNormal();	// 通常描画
	void DrawShader(CShader* pShader);	// シェーダー描画
	VECTOR3 GetNormalLeft(VERTEX_3D* pVtx);			// 法線の取得 (左)
	VECTOR3 GetNormalLeftTop(VERTEX_3D* pVtx);		// 法線の取得 (左上)
	VECTOR3 GetNormalLeftBottom(VERTEX_3D* pVtx);	// 法線の取得 (左下)
	VECTOR3 GetNormalRight(VERTEX_3D* pVtx);		// 法線の取得 (右)
	VECTOR3 GetNormalRightTop(VERTEX_3D* pVtx);		// 法線の取得 (右上)
	VECTOR3 GetNormalRightBottom(VERTEX_3D* pVtx);	// 法線の取得 (右下)

	// メンバ変数
	LPDIRECT3DVERTEXBUFFER9 m_pVtxBuff;	// 頂点バッファへのポインタ
	LPDIRECT3DINDEXBUFFER9 m_pIdxBuff;	// インデックスバッファへのポインタ
	CRenderState* m_pRenderState;		// レンダーステートの情報
	VECTOR3* m_pPosGapBuff;	// 座標のずれバッファへのポインタ
	VECTOR3* m_pNorBuff;	// 法線バッファへのポインタ
	int* m_pNumNorBuff;		// 法線の使用数バッファへのポインタ
	MATRIX m_mtxWorld;		// ワールドマトリックス
	VECTOR3 m_pos;			// 位置
	VECTOR3 m_rot;			// 向き
	VECTOR2 m_size;			// 大きさ
	COLOR m_col;			// 色
	POSGRID2 m_part;		// 分割数
	POSGRID2 m_texPart;		// テクスチャ分割数
	int m_nNumVtx;			// 必要頂点数
	int m_nNumIdx;			// 必要インデックス数
	int m_nTextureIdx;		// テクスチャインデックス
};

#endif	// _OBJECT_MESHFIELD_H_
