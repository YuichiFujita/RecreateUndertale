//============================================================
//
//	文字送り速度低下状態処理 [introStateTextSlow.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "introStateTextSlow.h"
#include "introManager.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const int SLOW_CHAR_IDX = 20;	// 速度低下を開始する文字インデックス
}

//************************************************************
//	子クラス [CIntroStateTextSlow] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CIntroStateTextSlow::CIntroStateTextSlow()
{

}

//============================================================
//	デストラクタ
//============================================================
CIntroStateTextSlow::~CIntroStateTextSlow()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CIntroStateTextSlow::Init()
{
	// 親クラスの初期化
	if (FAILED(CIntroStateText::Init()))
	{ // 初期化に失敗した場合

		assert(false);
		return E_FAIL;
	}

	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CIntroStateTextSlow::Uninit()
{
	// 文字送りの速度を通常に戻す
	m_pContext->SetEnableSlowText(false);

	// 親クラスの終了
	CIntroStateText::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CIntroStateTextSlow::Update(const float fDeltaTime)
{
	if (m_pContext->GetNextCharIdx() == SLOW_CHAR_IDX)
	{ // …の表示タイミングになった場合

		// 文字送りの速度を遅くする
		m_pContext->SetEnableSlowText(true);
	}

	// 親クラスの更新
	CIntroStateText::Update(fDeltaTime);
}
