//============================================================
//
//	物語スクロール状態処理 [introStateScroll.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "introStateScroll.h"
#include "introManager.h"
#include "scroll2D.h"	// TODO：いらん

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const float WAIT_TIME = 4.0f;	// 物語スクロール待機時間
}

//************************************************************
//	子クラス [CIntroStateScroll] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CIntroStateScroll::CIntroStateScroll() :
	m_fCurTime	(0.0f)	// 現在の待機時間
{

}

//============================================================
//	デストラクタ
//============================================================
CIntroStateScroll::~CIntroStateScroll()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CIntroStateScroll::Init(void)
{
	// メンバ変数を初期化
	m_fCurTime = 0.0f;	// 現在の待機時間

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CIntroStateScroll::Uninit(void)
{
	// 自身の破棄
	delete this;
}

//============================================================
//	更新処理
//============================================================
void CIntroStateScroll::Update(const float fDeltaTime)
{
	// TODO：とりあえずこれで動く。あとは関数分けしよう。
	if (m_pContext->m_pStory->GetNumLoopV() >= 1)
	{
		m_pContext->m_pStory->SetMoveV(0.0f);
		m_pContext->m_pStory->SetTexV(1.0f);

		// 待機状態にする
		m_pContext->ChangeState(new CIntroStateWait(4.0f));
	}

	// 待機時刻を進める
	m_fCurTime += fDeltaTime;
	if (m_fCurTime >= WAIT_TIME)
	{ // 待機終了した場合

		// 待機時間を初期化
		//m_fCurTime = 0.0f;

		// 
		m_pContext->m_pStory->SetMoveV(-0.005f);
	}
}
