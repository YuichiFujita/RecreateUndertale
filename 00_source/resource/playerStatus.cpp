//============================================================
//
//	プレイヤーステータス処理 [playerStatus.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "playerStatus.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	namespace love
	{
		const int MIN = 1;	// 最小レベル
		const int MAX = 20;	// 最大レベル
	}

	namespace hp
	{
		const int MAX_MIN_LOVE = 20;	// レベル1の最大体力
		const int MAX_MAX_LOVE = 99;	// 最大レベル時の最大体力
		const int PLUS = 4;				// レベル上昇時の体力加算量
	}

	namespace atk
	{
		const int NUM_MIN_LOVE = 0;	// レベル1の攻撃力
		const int PLUS = 2;			// レベル上昇時の攻撃力加算量
	}

	namespace def
	{
		const int NUM_MIN_LOVE = 0;	// レベル1の防御力
		const int INTERVAL = 4;		// 防御力が上昇するレベル間隔量
		const int PLUS = 1;			// レベル上昇時の防御力加算量
	}

	namespace exp
	{
		const int LV_NEXT[] =	// 次レベルまでに必要な経験値
		{
			10,		20,		40,		50,		80,
			100,	200,	300,	400,	500,
			800,	1000,	1500,	2000,	3000,
			5000,	10000,	25000,	49999,	0,
		};
	}
}

//************************************************************
//	構造体 [SPlayerStatus] のメンバ関数
//************************************************************
//============================================================
//	最大HPの取得処理 (最大レベル)
//============================================================
int SPlayerStatus::GetMaxHP() const
{
	// 最大レベル時のHPを返す
	return hp::MAX_MAX_LOVE;
}

//============================================================
//	最大HPの取得処理 (レベル指定)
//============================================================
int SPlayerStatus::GetMaxHP(const int nLv) const
{
	// レベルが範囲外の場合抜ける
	if (nLv <= 0 || nLv > love::MAX) { assert(false); return 0; }

	if (nLv < love::MAX)
	{ // 最大レベル未満の場合

		// 指定レベル時の最大HPを返す
		return hp::MAX_MIN_LOVE + (hp::PLUS * (nLv - 1));
	}

	// 最大レベル時の最大HPを返す
	return hp::MAX_MAX_LOVE;
}

//============================================================
//	現在の最大HPの取得処理
//============================================================
int SPlayerStatus::GetCurMaxHP() const
{
	// 現在の最大HPを返す
	return GetMaxHP(nLove);
}

//============================================================
//	攻撃力の取得処理
//============================================================
int SPlayerStatus::GetAtk(const int nLv) const
{
	// レベルが範囲外の場合抜ける
	if (nLv <= 0 || nLv > love::MAX) { assert(false); return 0; }

	// 指定レベル時の攻撃力を返す
	return atk::NUM_MIN_LOVE + (atk::PLUS * (nLv - 1));
}

//============================================================
//	現在の攻撃力の取得処理
//============================================================
int SPlayerStatus::GetCurAtk() const
{
	// 現在の攻撃力を返す
	return GetAtk(nLove);
}

//============================================================
//	防御力の取得処理
//============================================================
int SPlayerStatus::GetDef(const int nLv) const
{
	// レベルが範囲外の場合抜ける
	if (nLv <= 0 || nLv > love::MAX) { assert(false); return 0; }

	// 指定レベル時の防御力を返す
	return def::NUM_MIN_LOVE + (def::PLUS * ((nLv - 1) / def::INTERVAL));
}

//============================================================
//	現在の防御力の取得処理
//============================================================
int SPlayerStatus::GetCurDef() const
{
	// 現在の防御力を返す
	return GetDef(nLove);
}

//============================================================
//	次レベルまでのEXP取得処理
//============================================================
int SPlayerStatus::GetNext(const int nLv) const
{
	// レベルが範囲外の場合抜ける
	if (nLv <= 0 || nLv > love::MAX) { assert(false); return 0; }

	// 指定レベル時のEXPを返す
	return exp::LV_NEXT[nLv];
}

//============================================================
//	現在の次レベルまでのEXP取得処理
//============================================================
int SPlayerStatus::GetCurNext() const
{
	// 現在のEXPを返す
	return GetNext(nLove);
}
