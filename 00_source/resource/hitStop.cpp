//============================================================
//
//	ヒットストップ処理 [hitStop.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "hitStop.h"

//************************************************************
//	親クラス [CHitStop] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CHitStop::CHitStop() :
	m_bStop		(false),	// 停止状況
	m_nCounter	(0)			// 停止時間
{

}

//============================================================
//	デストラクタ
//============================================================
CHitStop::~CHitStop()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CHitStop::Init(void)
{
	// メンバ変数を初期化
	m_bStop = false;	// 停止状況
	m_nCounter = 0;		// 停止時間

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CHitStop::Uninit(void)
{

}

//============================================================
//	更新処理
//============================================================
void CHitStop::Update(const float fDeltaTime)
{
	if (m_bStop)
	{ // ヒットストップ中の場合

		// カウンター減算
		m_nCounter--;
		if (m_nCounter <= 0)
		{ // 計測終了した場合

			// ヒットストップを解除
			m_bStop = false;
		}
	}
}

//============================================================
//	描画処理
//============================================================
void CHitStop::Draw(void)
{

}

//============================================================
//	停止状況の設定処理
//============================================================
void CHitStop::SetStop(const int nCounter)
{
	// 停止フラグをONにする
	m_bStop = true;

	// 停止時間を設定
	m_nCounter = nCounter;
}

//============================================================
//	生成処理
//============================================================
CHitStop *CHitStop::Create(void)
{
	// ヒットストップの生成
	CHitStop *pHitStop = new CHitStop;
	if (pHitStop == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// ヒットストップの初期化
		if (FAILED(pHitStop->Init()))
		{ // 初期化に失敗した場合

			// ヒットストップの破棄
			SAFE_DELETE(pHitStop);
			return nullptr;
		}

		// 確保したアドレスを返す
		return pHitStop;
	}
}

//============================================================
//	破棄処理
//============================================================
void CHitStop::Release(CHitStop *&prHitStop)
{
	// ヒットストップの終了
	assert(prHitStop != nullptr);
	prHitStop->Uninit();

	// メモリ開放
	SAFE_DELETE(prHitStop);
}
