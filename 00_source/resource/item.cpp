//============================================================
//
//	アイテム処理 [item.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "item.h"
#include "manager.h"
#include "renderer.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const char *LOAD_TXT = "data\\TXT\\item.txt";	// アイテムテキスト相対パス
}

//************************************************************
//	親クラス [CItem] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CItem::CItem()
{
	// メンバ変数をクリア
	memset(&m_apItemData[0], 0, sizeof(m_apItemData));	// アイテム配列
}

//============================================================
//	デストラクタ
//============================================================
CItem::~CItem()
{

}

//============================================================
//	アイテム初期化処理
//============================================================
HRESULT CItem::Init(void)
{
	// メンバ変数を初期化
	memset(&m_apItemData[0], 0, sizeof(m_apItemData));	// アイテム配列

	// 成功を返す
	return S_OK;
}

//============================================================
//	アイテム終了処理
//============================================================
void CItem::Uninit(void)
{

}

//============================================================
//	アイテム全読込処理
//============================================================
HRESULT CItem::LoadAll(void)
{
	// アイテム情報のセットアップ
	if (FAILED(LoadSetup()))
	{ // セットアップに失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 成功を返す
	return S_OK;
}

//============================================================
//	アイテム情報の取得処理
//============================================================
const CItemData& CItem::GetInfo(const int nID)
{
	// TODO：つくれ
#if 0
	int nArray = (int)m_mapItem.size();	// 配列要素数
	if (nID > NONE_IDX && nID < nArray)
	{ // アイテムがある場合

		// 引数のアイテム情報を返す
		return m_mapItem.find(nID)->second.itemData;
	}
	else
	{ // アイテムがない場合

		// インデックスエラー
		assert(false);

		if (nArray > 0)
		{ // アイテム生成がされている場合

			// 先頭アイテムを返す
			return m_mapItem.find(0)->second.itemData;
		}
		else
		{ // アイテムが一つもない場合

			// 空のアイテム情報を返す
			SItem tempItem;
			memset(&tempItem, 0, sizeof(tempItem));
			return tempItem;
		}
	}
#endif

	return *m_apItemData[0];
}

//============================================================
//	生成処理
//============================================================
CItem *CItem::Create(void)
{
	// アイテムの生成
	CItem *pItem = new CItem;
	if (pItem == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// アイテムの初期化
		if (FAILED(pItem->Init()))
		{ // アイテム初期化に失敗した場合

			// アイテムの破棄
			SAFE_DELETE(pItem);
			return nullptr;
		}

		// 確保したアドレスを返す
		return pItem;
	}
}

//============================================================
//	破棄処理
//============================================================
void CItem::Release(CItem *&prItem)
{
	// アイテムの終了
	assert(prItem != nullptr);
	prItem->Uninit();

	// メモリ開放
	SAFE_DELETE(prItem);
}

//============================================================
//	アイテム情報のセットアップ処理
//============================================================
HRESULT CItem::LoadSetup(void)
{
	int nID = 0;	// インデックスの代入用

	// ファイルを開く
	std::ifstream file(LOAD_TXT);	// ファイルストリーム
	if (file.fail())
	{ // ファイルが開けなかった場合

		// エラーメッセージボックス
		MessageBox(nullptr, "アイテムセットアップの読み込みに失敗！", "警告！", MB_ICONWARNING);

		// 失敗を返す
		return E_FAIL;
	}

	// ファイルを読込
	std::string str;	// 読込文字列
	while (file >> str)
	{ // ファイルの終端ではない場合ループ

		if (str.front() == '#')
		{ // コメントアウトされている場合

			// 一行全て読み込む
			std::getline(file, str);
		}
		else if (str == "ITEMSET")
		{
			do { // END_PARTSSETを読み込むまでループ

				// 文字列を読み込む
				file >> str;

				if (str.front() == '#')
				{ // コメントアウトされている場合

					// 一行全て読み込む
					std::getline(file, str);
				}
				else if (str == "TYPE")
				{
					file >> str;	// ＝を読込
					file >> nID;	// インデックスを読込

					// 空のアイテムデータを生成
					assert(m_apItemData[nID] == nullptr);
					m_apItemData[nID] = CItemData::Create();
					if (m_apItemData[nID] == nullptr)
					{ // 生成に失敗した場合

						// 失敗を返す
						assert(false);
						return E_FAIL;
					}
				}
				else if (str == "NAME")
				{
					file >> str;	// ＝を読込
					file >> str;	// アイテム名を読込

					// アイテム名を保存
					m_apItemData[nID]->SetName(str.c_str());
				}
			} while (str != "END_PARTSSET");	// END_PARTSSETを読み込むまでループ
		}
	}

	// ファイルを閉じる
	file.close();

	// 成功を返す
	return S_OK;
}

//************************************************************
//	親クラス [CItemData] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CItemData::CItemData()
{

}

//============================================================
//	デストラクタ
//============================================================
CItemData::~CItemData()
{

}

//============================================================
//	生成処理
//============================================================
CItemData *CItemData::Create(void)
{
	// TODO：アイテムによってクラス派生
#if 0
	// アイテム情報の生成
	CItemData *pItemData = new CItemData;
	if (pItemData == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// アイテム情報の初期化
		if (FAILED(pItemData->Init()))
		{ // 初期化に失敗した場合

			// アイテム情報の破棄
			SAFE_DELETE(pItemData);
			return nullptr;
		}

		// 確保したアドレスを返す
		return pItemData;
	}
#else
	return nullptr;
#endif
}

//============================================================
//	破棄処理
//============================================================
void CItemData::Release(CItemData *&prItemData)
{
	// アイテム情報の終了
	assert(prItemData != nullptr);
	prItemData->Uninit();

	// メモリ開放
	SAFE_DELETE(prItemData);
}
