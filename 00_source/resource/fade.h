//============================================================
//
//	フェードヘッダー [fade.h]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	二重インクルード防止
//************************************************************
#ifndef _FADE_H_
#define _FADE_H_

//************************************************************
//	インクルードファイル
//************************************************************
#include "scene.h"
#include "object2D.h"

//************************************************************
//	クラス定義
//************************************************************
// フェードクラス
class CFade : public CObject2D
{
public:
	// フェード状態列挙
	enum EFade
	{
		FADE_NONE = 0,	// 何もしていない状態
		FADE_WAIT,		// フェード余韻状態
		FADE_IN,		// フェードイン状態
		FADE_OUT,		// フェードアウト状態
		FADE_MAX		// この列挙型の総数
	};

	// コンストラクタ
	CFade();

	// デストラクタ
	~CFade();

	// オーバーライド関数
	HRESULT Init(void) override;	// 初期化
	void Uninit(void) override;		// 終了
	void Update(const float fDeltaTime) override;	// 更新
	void Draw(CShader *pShader = nullptr) override;	// 描画

	// 静的メンバ関数
	static CFade *Create(void);	// 生成

	// メンバ関数
	EFade GetState(void) const { return m_fade; }			// フェード状態取得
	void SetFade(const float fLevel, const int nPriority);	// フェード開始設定
	void SetModeFade(const CScene::EMode mode, const float fWaitTime);	// 次シーン設定 (フェードのみ)
	void SetLoadFade(const CScene::EMode mode, const float fWaitTime);	// 次シーン設定 (ロード画面付き)

private:
	// メンバ変数
	std::function<HRESULT(CScene::EMode)> m_pFuncSetMode;	// モード設定関数ポインタ
	CScene::EMode m_modeNext;	// 次シーン
	EFade m_fade;		// フェード状態
	float m_fWaitTime;	// 現在の余韻時間
	float m_fLevel;		// α値加減量
};

#endif	// _FADE_H_
