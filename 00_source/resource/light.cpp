//============================================================
//
//	ライト処理 [light.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "light.h"
#include "manager.h"
#include "renderer.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const int PRIORITY = 7;	// 優先順位
}

//************************************************************
//	静的メンバ変数宣言
//************************************************************
int CLight::m_nNumLight = 0;	// ライトの総数

//************************************************************
//	親クラス [CLight] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CLight::CLight() : CObject(CObject::LABEL_LIGHT, CObject::DIM_3D, PRIORITY),
	m_nLightIdx	(m_nNumLight)	// 自身のライトインデックス
{
	// 構造体の要素をクリア
	ZeroMemory(&m_light, sizeof(D3DLIGHT9));

	// ライトの総数を加算
	m_nNumLight++;
}

//============================================================
//	デストラクタ
//============================================================
CLight::~CLight()
{
	// ライトの総数を減算
	m_nNumLight--;
}

//============================================================
//	初期化処理
//============================================================
HRESULT CLight::Init()
{
	// 構造体の要素をクリア
	ZeroMemory(&m_light, sizeof(D3DLIGHT9));

	// ライトを有効にする
	SetEnableLight(true);

	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CLight::Uninit()
{
	if (GET_RENDERER != nullptr)
	{ // レンダラーが破棄されていない場合

		// ライトを無効にする
		SetEnableLight(false);
	}

	// オブジェクトを破棄
	Release();
}

//============================================================
//	更新処理
//============================================================
void CLight::Update(const float fDeltaTime)
{

}

//============================================================
//	描画処理
//============================================================
void CLight::Draw(CShader* /*pShader*/)
{

}

//============================================================
//	種類の設定処理
//============================================================
void CLight::SetType(const D3DLIGHTTYPE type)
{
	// 種類の設定
	m_light.Type = type;

	// ライトに設定を反映
	GET_DEVICE->SetLight(m_nLightIdx, &m_light);
}

//============================================================
//	拡散光の設定処理
//============================================================
void CLight::SetDiffuse(const COLOR& rCol)
{
	// 拡散光の設定
	m_light.Diffuse = rCol;

	// ライトに設定を反映
	GET_DEVICE->SetLight(m_nLightIdx, &m_light);
}

//============================================================
//	方向の設定処理
//============================================================
void CLight::SetDirection(const VECTOR3& rDir)
{
	VECTOR3 dir = rDir;	// 方向

	// 方向を正規化
	dir.Normal();

	// 方向の設定
	m_light.Direction = dir;

	// ライトに設定を反映
	GET_DEVICE->SetLight(m_nLightIdx, &m_light);
}

//============================================================
//	有効の設定処理
//============================================================
void CLight::SetEnableLight(const bool bLight)
{
	// ライトフラグを設定
	GET_DEVICE->LightEnable(m_nLightIdx, bLight);
}
