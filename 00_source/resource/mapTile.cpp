//============================================================
//
//	マップタイル処理 [mapTile.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "mapTile.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const char *TEXTURE_FILE[] =	// テクスチャファイル
	{
		nullptr,	// テクスチャなし
		"data\\TEXTURE\\RUINS\\spr_fallpoint.png",	// 初期落下地点
	};
	const int PRIORITY = 3;	// マップタイルの優先順位
}

//************************************************************
//	スタティックアサート
//************************************************************
static_assert(NUM_ARRAY(TEXTURE_FILE) == CMapTile::TYPE_MAX, "ERROR : Type Count Mismatch");

//************************************************************
//	子クラス [CMapTile] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CMapTile::CMapTile() : CObject3D(CObject::LABEL_MAPTILE, CObject::DIM_3D, PRIORITY),
	m_type((EType)0)	// 種類
{

}

//============================================================
//	デストラクタ
//============================================================
CMapTile::~CMapTile()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CMapTile::Init(void)
{
	// メンバ変数を初期化
	m_type = TYPE_NONE;	// 種類

	// オブジェクト3Dの初期化
	if (FAILED(CObject3D::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 大きさを設定
	SetVec3Sizing(D3DXVECTOR3(SIZE_TILE, SIZE_TILE, 0.0f));

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CMapTile::Uninit(void)
{
	// オブジェクト3Dの終了
	CObject3D::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CMapTile::Update(const float fDeltaTime)
{
	// オブジェクト3Dの更新
	CObject3D::Update(fDeltaTime);
}

//============================================================
//	描画処理
//============================================================
void CMapTile::Draw(CShader *pShader)
{
	// オブジェクト3Dの描画
	CObject3D::Draw(pShader);
}

//============================================================
//	生成処理
//============================================================
CMapTile *CMapTile::Create(const EType type, const D3DXVECTOR3& rPos)
{
	// マップタイルの生成
	CMapTile *pMapTile = new CMapTile;
	if (pMapTile == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// マップタイルの初期化
		if (FAILED(pMapTile->Init()))
		{ // 初期化に失敗した場合

			// マップタイルの破棄
			SAFE_DELETE(pMapTile);
			return nullptr;
		}

		// 種類を設定
		pMapTile->SetType(type);

		// 位置を設定
		pMapTile->SetVec3Position(rPos);

		// 確保したアドレスを返す
		return pMapTile;
	}
}

//============================================================
//	種類設定処理
//============================================================
void CMapTile::SetType(const EType type)
{
	// 種類を保存
	m_type = type;

	// テクスチャを割当
	BindTexture(TEXTURE_FILE[type]);

	if (m_type == TYPE_FALL_POINT)
	{
		// 大きさを設定
		SetVec3Sizing(D3DXVECTOR3(SIZE_TILE * 34.0f, SIZE_TILE * 13.0f, 0.0f));	// TODO：どうにかしよう
	}
}
